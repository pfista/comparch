        -:    0:Source:utils.c
        -:    0:Programs:5
        -:    1:
        -:    2:/* ***************************************************************** */
        -:    3:/*                                                                   */
        -:    4:/*                                                                   */
        -:    5:/* ***************************************************************** */
        -:    6:
        -:    7:/* The code to read a memory trace and simulate it on the various
        -:    8:   caches. */
        -:    9:
        -:   10:#include "global.h"
        -:   11:#include "utils.h"        // utility functions
        -:   12:
        -:   13:
        -:   14:/* ***************************************************************** */
        -:   15:/*                                                                   */
        -:   16:/*                                                                   */
        -:   17:/* ***************************************************************** */
        -:   18:
        -:   19:/* n is a power of two, which one? */
        -:   20:/* 1 -> 0; 2 -> 1; 4->2... */
1678734285:   21:int which_power(int n)
        -:   22:{
1678734285:   23:    int i = 0;
1678734285:   24:    int t = 1;
15041230355:   25:    while (n > t)
        -:   26:        {
11683761785:   27:            t += t;
11683761785:   28:            i += 1;
        -:   29:        }
1678734285:   30:    return(i);
        -:   31:}
        -:   32:
        -:   33:/* generate a mask of n low order bits */
        -:   34:/* if we want a mask of two bits, shift a 1 two
        -:   35:   bits over (100), and then subtract one (011). */
1341843235:   36:unsigned int mask_of(int n)
        -:   37:{
        -:   38:    int m;
1341843235:   39:    if (n <= 0) return(0);
1274465025:   40:    m = (1 << n) - 1;
1274465025:   41:    return(m);
        -:   42:}
        -:   43:
        -:   44:
        -:   45:/* ***************************************************************** */
        -:   46:/*                                                                   */
        -:   47:/*                                                                   */
        -:   48:/* ***************************************************************** */
        -:   49:
620471601:   50:Boolean ishex(int c)
        -:   51:{
620471601:   52:    if (('0' <= c) && (c <= '9')) return(TRUE);
170676044:   53:    if (('a' <= c) && (c <= 'f')) return(TRUE);
 66234017:   54:    if (('A' <= c) && (c <= 'F')) return(TRUE);
 66234017:   55:    return(FALSE);
        -:   56:}
        -:   57:
554237584:   58:int hexvalue(int c)
        -:   59:{
554237584:   60:    if (('0' <= c) && (c <= '9')) return(c - '0');
104442027:   61:    if (('a' <= c) && (c <= 'f')) return(c - 'a' + 10);
    #####:   62:    if (('A' <= c) && (c <= 'F')) return(c - 'A' + 10);
    #####:   63:    return(-1);
        -:   64:}
        -:   65:
 66248674:   66:int decvalue(int c)
        -:   67:{
 66248674:   68:    if (('0' <= c) && (c <= '9')) return(c - '0');
    #####:   69:    return(-1);
        -:   70:}
        -:   71:
        -:   72:
        -:   73:/* ***************************************************************** */
        -:   74:/*                                                                   */
        -:   75:/*                                                                   */
        -:   76:/* ***************************************************************** */
        -:   77:
        -:   78:/* MALLOC space for a string and copy it */
        -:   79:
       10:   80:String remember_string(const String name)
        -:   81:{
        -:   82:    size_t n;
        -:   83:    String p;
        -:   84:
       10:   85:    if (name == NULL) return(NULL);
        -:   86:
        -:   87:    /* get memory to remember file name */
       10:   88:    n = strlen(name) + 1;
       10:   89:    p = CAST(String , malloc(n));
       10:   90:    strcpy(p, name);
       10:   91:    return(p);
        -:   92:}
        -:   93:
        -:   94:/* ***************************************************************** */
        -:   95:/*                                                                   */
        -:   96:/*                                                                   */
        -:   97:/* ***************************************************************** */
        -:   98:
 66234153:   99:int skip_blanks(FILE *file)
        -:  100:{
        -:  101:    int c;
 66234153:  102:    while (((c = getc(file)) != EOF) && isspace(c)) /* keep reading */;
 66234153:  103:    return(c);
        -:  104:}
        -:  105:
        -:  106:
    #####:  107:int skip_line(FILE *file)
        -:  108:{
        -:  109:    int c;
    #####:  110:    while (((c = getc(file)) != EOF) && (c != '\n')) /* keep reading */;
    #####:  111:    c = skip_blanks(file);
    #####:  112:    return(c);
        -:  113:}
        -:  114:
        -:  115:
