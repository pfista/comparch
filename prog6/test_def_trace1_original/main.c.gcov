        -:    0:Source:main.c
        -:    0:Programs:5
        -:    1:
        -:    2:/* ***************************************************************** */
        -:    3:/*                                                                   */
        -:    4:/*                                                                   */
        -:    5:/* ***************************************************************** */
        -:    6:
        -:    7:/* A program to simulate cache behaviour on a valgrind memory trace. */
        -:    8:
        -:    9:/* The input is a description of a set of caches, and a memory trace.
        -:   10:   We run the memory trace on each of the caches, and report statistics. */
        -:   11:
        -:   12:
        -:   13:#include "global.h"
        -:   14:#include "caches.h"
        -:   15:
        -:   16:Boolean debug = FALSE;
        -:   17:
        -:   18:
        -:   19:/* ***************************************************************** */
        -:   20:/*                                                                   */
        -:   21:/*                                                                   */
        -:   22:/* ***************************************************************** */
        -:   23:
    #####:   24:void usage(void)
        -:   25:{
    #####:   26:    fprintf (stderr,"usage: caches [-d] cache-descriptions-file  memory-trace-file\n");
    #####:   27:}
        -:   28:
    #####:   29:void scanargs(String s)
        -:   30:{
        -:   31:    /* check each character of the option list for
        -:   32:       its meaning. */
        -:   33:
    #####:   34:    while (*++s != '\0')
    #####:   35:        switch (*s)
        -:   36:            {
        -:   37:
        -:   38:            case 'd': /* debug option */
    #####:   39:                debug = TRUE;
    #####:   40:                if (debug)
        -:   41:                    {
    #####:   42:                        debug_file = fopen("DEBUG_LOG", "w");
    #####:   43:                        if (debug_file == NULL)
        -:   44:                            {
    #####:   45:                                fprintf(stderr, "Cannot open DEBUG_LOG\n");
    #####:   46:                                debug = FALSE;
        -:   47:                            }
        -:   48:                    }
    #####:   49:                break;
        -:   50:
        -:   51:            default:
    #####:   52:                fprintf (stderr,"caches: Bad option %c\n", *s);
    #####:   53:                usage();
    #####:   54:                exit(1);
        -:   55:            }
    #####:   56:}
        -:   57:
        -:   58:
        -:   59:/* ***************************************************************** */
        -:   60:/*                                                                   */
        -:   61:/*                                                                   */
        -:   62:/* ***************************************************************** */
        -:   63:
        1:   64:int main(int argc, String *argv)
        -:   65:{
        -:   66:    /* main driver program.  There are two input 
        -:   67:       files.
        -:   68:       1. defines the caches
        -:   69:       2. defines the memory trace
        -:   70:    */
        -:   71:       
        -:   72:    /* Process all arguments. */
        -:   73:    /* skip program name */
        1:   74:    argc--, argv++;
        2:   75:    while ((argc > 1) && (**argv == '-'))
        -:   76:        {
    #####:   77:            scanargs(*argv);
    #####:   78:            argc--, argv++;
        -:   79:        }
        -:   80:
        1:   81:    if (argc != 2)
        -:   82:        {
    #####:   83:            usage();
    #####:   84:            exit(-1);
        -:   85:        }
        -:   86:
        1:   87:    Read_Cache_Descriptions(argv[0]);
        1:   88:    Init_Caches();
        -:   89:
        1:   90:    Simulate_Caches(argv[1]);
        -:   91:
        1:   92:    Print_Cache_Statistics();
        1:   93:    Delete_Caches();
        -:   94:
        1:   95:    exit(0);
        -:   96:}
