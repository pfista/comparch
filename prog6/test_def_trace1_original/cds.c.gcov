        -:    0:Source:cds.c
        -:    0:Programs:5
        -:    1:/* ***************************************************************** */
        -:    2:/*                                                                   */
        -:    3:/*                                                                   */
        -:    4:/* ***************************************************************** */
        -:    5:
        -:    6:/* cache description support code */
        -:    7:
        -:    8:#include "global.h"
        -:    9:#include "cds.h"
        -:   10:
        -:   11:
        -:   12:
        -:   13:/* ***************************************************************** */
        -:   14:/*                                                                   */
        -:   15:/*                                                                   */
        -:   16:/* ***************************************************************** */
        -:   17:
        5:   18:String print_sets_and_ways(CDS *cds)
        -:   19:{
        5:   20:    if (cds->number_of_ways == 1) return("direct-mapped");
        4:   21:    if (cds->number_of_ways == cds->number_of_cache_entries) return("fully associative");
        -:   22:
        -:   23:    static char buffer[64];
        6:   24:    sprintf (buffer, "%d sets of %d ways", 
        3:   25:             cds->number_of_cache_entries/cds->number_of_ways, cds->number_of_ways);
        3:   26:    return(buffer);
        -:   27:}
        -:   28:
        -:   29:
        -:   30:/* ***************************************************************** */
        -:   31:/*                                                                   */
        -:   32:/*                                                                   */
        -:   33:/* ***************************************************************** */
        -:   34:
       15:   35:String memory_reference_type_name(enum memory_access_type type)
        -:   36:{
       15:   37:    switch(type)
        -:   38:        {
        5:   39:        case MAT_FETCH: return("Fetch");
        5:   40:        case MAT_LOAD:  return("Load");
        5:   41:        case MAT_STORE: return("Store");
        -:   42:        }
    #####:   43:    return("invalid");
        -:   44:}
        -:   45:
        -:   46:
        -:   47:/* ***************************************************************** */
        -:   48:/*                                                                   */
        -:   49:/*                                                                   */
        -:   50:/* ***************************************************************** */
        -:   51:
        5:   52:String CRP_name(CDS *cds)
        -:   53:{
        5:   54:    switch(cds->replacement_policy)
        -:   55:        {
        1:   56:        case CRP_FIFO:   return("FIFO");
    #####:   57:        case CRP_RANDOM: return("RANDOM");
        -:   58:
        -:   59:        case CRP_LFU: 
        -:   60:            {
        -:   61:                static char buffer[64];
        1:   62:                sprintf(buffer, "LFU (decay=%d)", cds->LFU_Decay_Interval);
        1:   63:                return(buffer);
        -:   64:            }
        -:   65:        
        3:   66:        case CRP_LRU: return("LRU");
        -:   67:        };
    #####:   68:    return("Invalid policy");
        -:   69:}
        -:   70:
        -:   71:
        -:   72:
    #####:   73:void debug_print_cds(CDS *cds)
        -:   74:{
    #####:   75:    fprintf(debug_file, "%s: Total number of entries: %d\n", cds->name,  cds->number_of_cache_entries);
    #####:   76:    fprintf(debug_file, "%s: %s\n", cds->name,  print_sets_and_ways(cds));
    #####:   77:    fprintf(debug_file, "%s: Each cache line is %d bytes\n", cds->name,  cds->cache_line_size);
    #####:   78:    fprintf(debug_file, "%s: Cache is %s\n", cds->name,  cds->write_back ? "write-back" : "write-thru");
    #####:   79:    fprintf(debug_file, "%s: With a %s replacement policy\n", cds->name, CRP_name(cds));
    #####:   80:}
        -:   81:
        -:   82:
        -:   83:/* ***************************************************************** */
        -:   84:/*                                                                   */
        -:   85:/*                                                                   */
        -:   86:/* ***************************************************************** */
        -:   87:
        5:   88:void Print_Cache_Statistics_for_one_cache(CDS *cds)
        -:   89:{
       10:   90:    fprintf(stdout, "%s: %d entries of lines of %d bytes; %s, %s, %s\n",
        -:   91:            cds->name, cds->number_of_cache_entries, cds->cache_line_size,
        -:   92:            print_sets_and_ways(cds),
        5:   93:            cds->write_back ? "write-back" : "write-thru",
        -:   94:            CRP_name(cds));
        -:   95:            
        5:   96:    fprintf(stdout, "      %d addresses (%d %s, %d %s, %d %s)\n",
        -:   97:            cds->number_of_memory_reference, 
        -:   98:            cds->number_of_type[MAT_FETCH], memory_reference_type_name(MAT_FETCH), 
        -:   99:            cds->number_of_type[MAT_LOAD], memory_reference_type_name(MAT_LOAD), 
        -:  100:            cds->number_of_type[MAT_STORE], memory_reference_type_name(MAT_STORE));
        -:  101:    
        5:  102:    fprintf(stdout, "      %d hits, %d misses, %d memory reads, %d memory writes\n",
        -:  103:            cds->number_cache_hits, cds->number_cache_misses,
        -:  104:            cds->number_memory_reads, cds->number_memory_writes);
        -:  105:
        5:  106:    fprintf(stdout, "\n");
        5:  107:}
        -:  108:
        -:  109:
        1:  110:void Print_Cache_Statistics(void)
        -:  111:{
        1:  112:    CDS *cds = CDS_root;
        7:  113:    while (cds != NULL)
        -:  114:        {
        5:  115:            Print_Cache_Statistics_for_one_cache(cds);
        5:  116:            cds = cds->next;
        -:  117:        }
        1:  118:}
        -:  119:
        -:  120:
        -:  121:/* ***************************************************************** */
        -:  122:/*                                                                   */
        -:  123:/*                                                                   */
        -:  124:/* ***************************************************************** */
        -:  125:
        -:  126:
        5:  127:void init_cache(CDS *cds)
        -:  128:{
        -:  129:    /* we need one cache line for every entry */
        5:  130:    cds->c = calloc(cds->number_of_cache_entries, sizeof(cache_line));
        5:  131:}
        -:  132:
        -:  133:
        1:  134:void Init_Caches(void)
        -:  135:{
        1:  136:    CDS *cds = CDS_root;
        7:  137:    while (cds != NULL)
        -:  138:        {
        5:  139:            init_cache(cds);
        5:  140:            cds = cds->next;
        -:  141:        }
        1:  142:}
        -:  143:
        -:  144:
        -:  145:/* ***************************************************************** */
        -:  146:/*                                                                   */
        -:  147:/*                                                                   */
        -:  148:/* ***************************************************************** */
        -:  149:
        5:  150:void init_cache_for_trace(CDS *cds)
        -:  151:{
        -:  152:    int i;
        5:  153:    for (i = 0; i < NUMBER_OF_MEMORY_ACCESS_TYPE; i++) cds->number_of_type[i] = 0;
        5:  154:    cds->number_of_memory_reference = 0;
        -:  155:
        5:  156:    cds->number_cache_hits = 0;
        5:  157:    cds->number_cache_misses = 0;
        5:  158:    cds->number_memory_reads = 0;
        5:  159:    cds->number_memory_writes = 0;
        5:  160:}
        -:  161:
        1:  162:void Init_caches_for_trace(void)
        -:  163:{
        1:  164:    CDS *cds = CDS_root;
        7:  165:    while (cds != NULL)
        -:  166:        {
        5:  167:            init_cache_for_trace(cds);
        5:  168:            cds = cds->next;
        -:  169:        }
        1:  170:}
        -:  171:
        -:  172:
        -:  173:
        -:  174:/* ***************************************************************** */
        -:  175:/*                                                                   */
        -:  176:/*                                                                   */
        -:  177:/* ***************************************************************** */
        -:  178:
        -:  179:
        5:  180:void delete_cache(CDS *cds)
        -:  181:{
        -:  182:    /* we need one cache line for every entry */
        5:  183:    free(cds->c);
        5:  184:    free(cds->name);
        5:  185:    free(cds);
        5:  186:}
        -:  187:
        -:  188:
        1:  189:void Delete_Caches(void)
        -:  190:{
        1:  191:    CDS *cds = CDS_root;
        7:  192:    while (cds != NULL)
        -:  193:        {
        5:  194:            CDS *old = cds;
        5:  195:            cds = cds->next;
        5:  196:            delete_cache(old);
        -:  197:        }
        1:  198:}
        -:  199:
        -:  200:
